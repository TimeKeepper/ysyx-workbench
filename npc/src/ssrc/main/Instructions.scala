package riscv_cpu

import chisel3._
import chisel3.util._

import chisel3.util.BitPat

// total instruction num: 35

object Instructions {
    // Loads
    def LB = BitPat("b?????????????????000?????0000011")
    def LH = BitPat("b?????????????????001?????0000011")
    def LW = BitPat("b?????????????????010?????0000011")
    def LBU = BitPat("b?????????????????100?????0000011")
    def LHU = BitPat("b?????????????????101?????0000011")
    // Stores
    def SB = BitPat("b?????????????????000?????0100011")
    def SH = BitPat("b?????????????????001?????0100011")
    def SW = BitPat("b?????????????????010?????0100011")
    // Shifts
    def SLL = BitPat("b0000000??????????001?????0110011")
    def SLLI = BitPat("b0000000??????????001?????0010011")
    def SRL = BitPat("b0000000??????????101?????0110011")
    def SRLI = BitPat("b0000000??????????101?????0010011")
    def SRA = BitPat("b0100000??????????101?????0110011")
    def SRAI = BitPat("b0100000??????????101?????0010011")
    // Arithmetic
    def ADD = BitPat("b0000000??????????000?????0110011")
    def ADDI = BitPat("b?????????????????000?????0010011")
    def SUB = BitPat("b0100000??????????000?????0110011")
    def LUI = BitPat("b?????????????????????????0110111")
    def AUIPC = BitPat("b?????????????????????????0010111")
    // Logical
    def XOR = BitPat("b0000000??????????100?????0110011")
    def XORI = BitPat("b?????????????????100?????0010011")
    def OR = BitPat("b0000000??????????110?????0110011")
    def ORI = BitPat("b?????????????????110?????0010011")
    def AND = BitPat("b0000000??????????111?????0110011")
    def ANDI = BitPat("b?????????????????111?????0010011")
    // Compare
    def SLT = BitPat("b0000000??????????010?????0110011")
    def SLTI = BitPat("b?????????????????010?????0010011")
    def SLTU = BitPat("b0000000??????????011?????0110011")
    def SLTIU = BitPat("b?????????????????011?????0010011")
    // Branches
    def BEQ = BitPat("b?????????????????000?????1100011")
    def BNE = BitPat("b?????????????????001?????1100011")
    def BLT = BitPat("b?????????????????100?????1100011")
    def BGE = BitPat("b?????????????????101?????1100011")
    def BLTU = BitPat("b?????????????????110?????1100011")
    def BGEU = BitPat("b?????????????????111?????1100011")
    // Jump & Link
    def JAL = BitPat("b?????????????????????????1101111")
    def JALR = BitPat("b?????????????????000?????1100111")
    // Synch
    def FENCE = BitPat("b0000????????00000000000000001111")
    def FENCEI = BitPat("b00000000000000000001000000001111")
    // CSR Access
    def CSRRW = BitPat("b?????????????????001?????1110011")
    def CSRRS = BitPat("b?????????????????010?????1110011")
    def CSRRC = BitPat("b?????????????????011?????1110011")
    def CSRRWI = BitPat("b?????????????????101?????1110011")
    def CSRRSI = BitPat("b?????????????????110?????1110011")
    def CSRRCI = BitPat("b?????????????????111?????1110011")
    // Change Level
    def ECALL = BitPat("b00000000000000000000000001110011")
    def EBREAK = BitPat("b00000000000100000000000001110011")
    def ERET = BitPat("b00010000000000000000000001110011")
    def WFI = BitPat("b00010000001000000000000001110011")

    def MRET = BitPat("b00110000001000000000000001110011")
    def NOP = BitPat.bitPatToUInt(BitPat("b00000000000000000000000000010011"))
}

object signal_value {
    def Y = true.B
    def N = false.B

    // ExtOp
    def ExtOp_Type = UInt(3.W)
    def immI = 0.U(3.W)
    def immU = 1.U(3.W)
    def immS = 2.U(3.W)
    def immB = 3.U(3.W)
    def immJ = 4.U(3.W)

    // Branch
    def Bran_Type = UInt(3.W)
    def Bran_NJmp = 0.U(3.W)
    def Bran_Jmp  = 1.U(3.W)
    def Bran_Jmpr = 2.U(3.W)
    def Bran_Jeq  = 4.U(3.W)
    def Bran_Jne  = 5.U(3.W)
    def Bran_Jlt  = 6.U(3.W)
    def Bran_Jge  = 7.U(3.W)

    // MemOp
    def MemOp_Type = UInt(3.W)
    def M_4BU  = 1.U(3.W)
    def M_2BS  = 2.U(3.W)
    def M_1BS  = 3.U(3.W)
    def M_2BU  = 4.U(3.W)
    def M_1BU  = 5.U(3.W)

    // ALUAsrc
    def ALUAsrc_Type = UInt(2.W)
    def A_RS1 = 0.U(2.W)
    def A_PC  = 1.U(2.W)
    def A_CSR = 2.U(2.W)

    // ALUBSrc
    def ALUBSrc_Type = UInt(2.W)
    def B_RS2 = 0.U(2.W)
    def B_IMM = 1.U(2.W)
    def B_4   = 2.U(2.W)
    def B_RS1 = 3.U(2.W)

    // ALUctr
    def ALUctr_Type = UInt(4.W)
    def ALU_ADD = 0.U(4.W)
    def ALU_SUB = 1.U(4.W)
    def ALU_SLL = 2.U(4.W)
    def ALU_Less_S = 3.U(4.W)
    def ALU_Less_U = 4.U(4.W)
    def ALU_B   = 5.U(4.W)
    def ALU_A   = 6.U(4.W)
    def ALU_XOR = 7.U(4.W)
    def ALU_SRL = 8.U(4.W)
    def ALU_SRA = 9.U(4.W)
    def ALU_OR  = 10.U(4.W)
    def ALU_AND = 11.U(4.W)

    // csr_ctr
    def CSR_Type = UInt(2.W)
    def CSR_N    = 0.U(2.W)
    def CSR_R1W0 = 1.U(2.W)  // mret
    def CSR_R1W1 = 2.U(2.W)
    def CSR_R1W2 = 3.U(2.W)  // ecall
}