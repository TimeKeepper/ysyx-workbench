// Generated by CIRCT firtool-1.66.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Debouncer(	// src/ssrc/main/homework/debouncer.scala:7:7
  input  clock,	// src/ssrc/main/homework/debouncer.scala:7:7
         reset,	// src/ssrc/main/homework/debouncer.scala:7:7
         io_input,	// src/ssrc/main/homework/debouncer.scala:8:16
  output io_output	// src/ssrc/main/homework/debouncer.scala:8:16
);

  reg [4:0] count;	// src/ssrc/main/homework/debouncer.scala:13:24
  reg       Iv;	// src/ssrc/main/homework/debouncer.scala:15:21
  reg       Output_filiter;	// src/ssrc/main/homework/debouncer.scala:17:33
  always @(posedge clock) begin	// src/ssrc/main/homework/debouncer.scala:7:7
    if (reset) begin	// src/ssrc/main/homework/debouncer.scala:7:7
      count <= 5'h0;	// src/ssrc/main/homework/debouncer.scala:13:24
      Iv <= 1'h0;	// src/ssrc/main/homework/debouncer.scala:7:7, :15:21
      Output_filiter <= 1'h0;	// src/ssrc/main/homework/debouncer.scala:7:7, :17:33
    end
    else begin	// src/ssrc/main/homework/debouncer.scala:7:7
      automatic logic _GEN;	// src/ssrc/main/homework/debouncer.scala:20:19
      _GEN = io_input == Iv;	// src/ssrc/main/homework/debouncer.scala:15:21, :20:19
      if (_GEN)	// src/ssrc/main/homework/debouncer.scala:20:19
        count <= count + 5'h1;	// src/ssrc/main/homework/debouncer.scala:13:24, :21:24
      else	// src/ssrc/main/homework/debouncer.scala:20:19
        count <= 5'h0;	// src/ssrc/main/homework/debouncer.scala:13:24
      Iv <= io_input;	// src/ssrc/main/homework/debouncer.scala:15:21
      if (_GEN & count == 5'h13)	// src/ssrc/main/homework/debouncer.scala:13:24, :17:33, :20:{19,26}, :22:{20,40}, :23:28
        Output_filiter <= io_input;	// src/ssrc/main/homework/debouncer.scala:17:33
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/ssrc/main/homework/debouncer.scala:7:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/ssrc/main/homework/debouncer.scala:7:7
      `FIRRTL_BEFORE_INITIAL	// src/ssrc/main/homework/debouncer.scala:7:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/ssrc/main/homework/debouncer.scala:7:7
      automatic logic [31:0] _RANDOM[0:0];	// src/ssrc/main/homework/debouncer.scala:7:7
      `ifdef INIT_RANDOM_PROLOG_	// src/ssrc/main/homework/debouncer.scala:7:7
        `INIT_RANDOM_PROLOG_	// src/ssrc/main/homework/debouncer.scala:7:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/ssrc/main/homework/debouncer.scala:7:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/ssrc/main/homework/debouncer.scala:7:7
        count = _RANDOM[/*Zero width*/ 1'b0][4:0];	// src/ssrc/main/homework/debouncer.scala:7:7, :13:24
        Iv = _RANDOM[/*Zero width*/ 1'b0][5];	// src/ssrc/main/homework/debouncer.scala:7:7, :13:24, :15:21
        Output_filiter = _RANDOM[/*Zero width*/ 1'b0][6];	// src/ssrc/main/homework/debouncer.scala:7:7, :13:24, :17:33
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/ssrc/main/homework/debouncer.scala:7:7
      `FIRRTL_AFTER_INITIAL	// src/ssrc/main/homework/debouncer.scala:7:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_output = Output_filiter;	// src/ssrc/main/homework/debouncer.scala:7:7, :17:33
endmodule

module PS2Receiver(	// src/ssrc/main/homework/PS2.scala:7:7
  input        clock,	// src/ssrc/main/homework/PS2.scala:7:7
               reset,	// src/ssrc/main/homework/PS2.scala:7:7
               io_kdata,	// src/ssrc/main/homework/PS2.scala:8:16
  output       io_keycode_valid,	// src/ssrc/main/homework/PS2.scala:8:16
  output [7:0] io_keycode_bits	// src/ssrc/main/homework/PS2.scala:8:16
);

  wire       _kdata_filiter_io_output;	// src/ssrc/main/homework/PS2.scala:18:31
  reg  [7:0] data_cur;	// src/ssrc/main/homework/PS2.scala:26:27
  reg        flag_prev;	// src/ssrc/main/homework/PS2.scala:29:28
  reg  [3:0] cnt;	// src/ssrc/main/homework/PS2.scala:33:22
  wire       flag_cur = cnt == 4'hA;	// src/ssrc/main/homework/PS2.scala:33:22, :44:18
  always @(posedge clock) begin	// src/ssrc/main/homework/PS2.scala:7:7
    if (reset) begin	// src/ssrc/main/homework/PS2.scala:7:7
      data_cur <= 8'h0;	// src/ssrc/main/homework/PS2.scala:26:27
      flag_prev <= 1'h0;	// src/ssrc/main/homework/PS2.scala:7:7, :29:28
      cnt <= 4'h0;	// src/ssrc/main/homework/PS2.scala:33:22
    end
    else begin	// src/ssrc/main/homework/PS2.scala:7:7
      data_cur <= {data_cur[6:0], _kdata_filiter_io_output};	// src/ssrc/main/homework/PS2.scala:18:31, :26:27, :42:{24,33}
      flag_prev <= flag_cur;	// src/ssrc/main/homework/PS2.scala:29:28, :44:18
      if (cnt == 4'hB)	// src/ssrc/main/homework/PS2.scala:33:22, :36:18
        cnt <= 4'h0;	// src/ssrc/main/homework/PS2.scala:33:22
      else	// src/ssrc/main/homework/PS2.scala:36:18
        cnt <= cnt + 4'h1;	// src/ssrc/main/homework/PS2.scala:33:22, :39:24
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/ssrc/main/homework/PS2.scala:7:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/ssrc/main/homework/PS2.scala:7:7
      `FIRRTL_BEFORE_INITIAL	// src/ssrc/main/homework/PS2.scala:7:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/ssrc/main/homework/PS2.scala:7:7
      automatic logic [31:0] _RANDOM[0:0];	// src/ssrc/main/homework/PS2.scala:7:7
      `ifdef INIT_RANDOM_PROLOG_	// src/ssrc/main/homework/PS2.scala:7:7
        `INIT_RANDOM_PROLOG_	// src/ssrc/main/homework/PS2.scala:7:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/ssrc/main/homework/PS2.scala:7:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/ssrc/main/homework/PS2.scala:7:7
        data_cur = _RANDOM[/*Zero width*/ 1'b0][7:0];	// src/ssrc/main/homework/PS2.scala:7:7, :26:27
        flag_prev = _RANDOM[/*Zero width*/ 1'b0][8];	// src/ssrc/main/homework/PS2.scala:7:7, :26:27, :29:28
        cnt = _RANDOM[/*Zero width*/ 1'b0][12:9];	// src/ssrc/main/homework/PS2.scala:7:7, :26:27, :33:22
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/ssrc/main/homework/PS2.scala:7:7
      `FIRRTL_AFTER_INITIAL	// src/ssrc/main/homework/PS2.scala:7:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Debouncer kdata_filiter (	// src/ssrc/main/homework/PS2.scala:18:31
    .clock     (clock),
    .reset     (reset),
    .io_input  (io_kdata),
    .io_output (_kdata_filiter_io_output)
  );	// src/ssrc/main/homework/PS2.scala:18:31
  assign io_keycode_valid = ~flag_prev & flag_cur;	// src/ssrc/main/homework/PS2.scala:7:7, :29:28, :44:18, :51:{35,47}
  assign io_keycode_bits = data_cur;	// src/ssrc/main/homework/PS2.scala:7:7, :26:27
endmodule

module Mouse_Ps2_Controller(	// src/ssrc/main/homework/PS2.scala:54:7
  input  clock,	// src/ssrc/main/homework/PS2.scala:54:7
         reset,	// src/ssrc/main/homework/PS2.scala:54:7
         io_kclk,	// src/ssrc/main/homework/PS2.scala:55:16
         io_kdata,	// src/ssrc/main/homework/PS2.scala:55:16
  output io_mouse_left_click	// src/ssrc/main/homework/PS2.scala:55:16
);

  wire       _ps2_receiver_io_keycode_valid;	// src/ssrc/main/homework/PS2.scala:61:30
  wire [7:0] _ps2_receiver_io_keycode_bits;	// src/ssrc/main/homework/PS2.scala:61:30
  reg        state;	// src/ssrc/main/homework/PS2.scala:71:24
  reg  [7:0] cnt;	// src/ssrc/main/homework/PS2.scala:73:22
  always @(posedge clock) begin	// src/ssrc/main/homework/PS2.scala:54:7
    if (reset) begin	// src/ssrc/main/homework/PS2.scala:54:7
      state <= 1'h0;	// src/ssrc/main/homework/PS2.scala:54:7, :71:24
      cnt <= 8'h0;	// src/ssrc/main/homework/PS2.scala:73:22
    end
    else begin	// src/ssrc/main/homework/PS2.scala:54:7
      automatic logic _GEN;	// src/ssrc/main/homework/PS2.scala:79:22
      _GEN = cnt == 8'h3;	// src/ssrc/main/homework/PS2.scala:73:22, :79:22
      state <= ~state & _GEN | state;	// src/ssrc/main/homework/PS2.scala:71:24, :74:19, :79:{22,30}, :81:23
      if (state) begin	// src/ssrc/main/homework/PS2.scala:71:24
        if (cnt == 8'h4)	// src/ssrc/main/homework/PS2.scala:73:22, :88:22
          cnt <= 8'h0;	// src/ssrc/main/homework/PS2.scala:73:22
        else if (_ps2_receiver_io_keycode_valid)	// src/ssrc/main/homework/PS2.scala:61:30
          cnt <= cnt + 8'h1;	// src/ssrc/main/homework/PS2.scala:73:22, :86:28
      end
      else if (_GEN)	// src/ssrc/main/homework/PS2.scala:79:22
        cnt <= 8'h0;	// src/ssrc/main/homework/PS2.scala:73:22
      else if (_ps2_receiver_io_keycode_valid)	// src/ssrc/main/homework/PS2.scala:61:30
        cnt <= cnt + 8'h1;	// src/ssrc/main/homework/PS2.scala:73:22, :77:28
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/ssrc/main/homework/PS2.scala:54:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/ssrc/main/homework/PS2.scala:54:7
      `FIRRTL_BEFORE_INITIAL	// src/ssrc/main/homework/PS2.scala:54:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/ssrc/main/homework/PS2.scala:54:7
      automatic logic [31:0] _RANDOM[0:0];	// src/ssrc/main/homework/PS2.scala:54:7
      `ifdef INIT_RANDOM_PROLOG_	// src/ssrc/main/homework/PS2.scala:54:7
        `INIT_RANDOM_PROLOG_	// src/ssrc/main/homework/PS2.scala:54:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/ssrc/main/homework/PS2.scala:54:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/ssrc/main/homework/PS2.scala:54:7
        state = _RANDOM[/*Zero width*/ 1'b0][0];	// src/ssrc/main/homework/PS2.scala:54:7, :71:24
        cnt = _RANDOM[/*Zero width*/ 1'b0][8:1];	// src/ssrc/main/homework/PS2.scala:54:7, :71:24, :73:22
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/ssrc/main/homework/PS2.scala:54:7
      `FIRRTL_AFTER_INITIAL	// src/ssrc/main/homework/PS2.scala:54:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  PS2Receiver ps2_receiver (	// src/ssrc/main/homework/PS2.scala:61:30
    .clock            (clock),
    .reset            (reset),
    .io_kdata         (io_kdata),
    .io_keycode_valid (_ps2_receiver_io_keycode_valid),
    .io_keycode_bits  (_ps2_receiver_io_keycode_bits)
  );	// src/ssrc/main/homework/PS2.scala:61:30
  assign io_mouse_left_click = cnt == 8'h1 & state & _ps2_receiver_io_keycode_bits[7];	// src/ssrc/main/homework/PS2.scala:54:7, :61:30, :71:24, :73:22, :94:{14,22,47}, :95:{29,44}, :97:29
endmodule


